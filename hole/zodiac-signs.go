package hole

import (
	"fmt"
	"math/rand"
)

var sunSigns = [...]sunSign{
	{3, 21, 31, "♈", []string{"♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑"}},
	{4, 1, 19, "♈", []string{"♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑"}},
	{4, 20, 30, "♉", []string{"♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒"}},
	{5, 1, 20, "♉", []string{"♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒"}},
	{5, 21, 31, "♊", []string{"♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓"}},
	{6, 1, 21, "♊", []string{"♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓"}},
	{6, 22, 30, "♋", []string{"♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈"}},
	{7, 1, 22, "♋", []string{"♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈"}},
	{7, 23, 31, "♌", []string{"♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉"}},
	{8, 1, 22, "♌", []string{"♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉"}},
	{8, 23, 31, "♍", []string{"♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊"}},
	{9, 1, 22, "♍", []string{"♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊"}},
	{9, 23, 30, "♎", []string{"♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋"}},
	{10, 1, 22, "♎", []string{"♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋"}},
	{10, 23, 31, "♏", []string{"♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌"}},
	{11, 1, 22, "♏", []string{"♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌"}},
	{11, 23, 30, "♐", []string{"♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍"}},
	{12, 1, 21, "♐", []string{"♎", "♎", "♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍"}},
	{12, 22, 31, "♑", []string{"♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎"}},
	{1, 1, 19, "♑", []string{"♏", "♏", "♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎"}},
	{1, 20, 31, "♒", []string{"♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏"}},
	{2, 1, 18, "♒", []string{"♐", "♐", "♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏"}},
	{2, 19, 28, "♓", []string{"♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐"}},
	{3, 1, 20, "♓", []string{"♑", "♑", "♒", "♒", "♓", "♓", "♈", "♈", "♉", "♉", "♊", "♊", "♋", "♋", "♌", "♌", "♍", "♍", "♎", "♎", "♏", "♏", "♐", "♐"}},
}

var hours = [...]int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}

type sunSign struct {
	month, startDate, endDate int
	symbol                    string
	risingSymbols             []string
}

func symbolsToString(sunSymbol string, risingSymbol string) string {
	if sunSymbol == risingSymbol {
		return sunSymbol
	}
	return fmt.Sprintf("%s%s", sunSymbol, risingSymbol)
}

func (sign sunSign) randomDate(hour int) test {
	d := rand.Intn(sign.endDate-sign.startDate) + sign.startDate
	m := rand.Intn(60)
	return test{fmt.Sprintf("%02d-%02d %02d:%02d", sign.month, d, hour, m), symbolsToString(sign.symbol, sign.risingSymbols[hour])}
}

func (sign sunSign) edgeDate(hour int) test {
	d := sign.startDate
	if d == 1 {
		d = sign.endDate
	}
	m := rand.Intn(60)
	return test{fmt.Sprintf("%02d-%02d %02d:%02d", sign.month, d, hour, m), symbolsToString(sign.symbol, sign.risingSymbols[hour])}
}

func zodiacSigns() ([]string, string) {
	const (
		randomCases = 20
		totalCases  = randomCases + len(sunSigns) + len(sunSigns)*len(hours)
	)

	tests := make([]test, randomCases, totalCases)

	for i := 0; i < randomCases; i++ {
		tests[i] = sunSigns[rand.Intn(len(sunSigns))].randomDate(hours[rand.Intn(len(hours))])
	}

	for _, sunSign := range sunSigns {
		tests = append(tests, sunSign.edgeDate(hours[rand.Intn(len(hours))]))
		for _, hour := range hours {
			tests = append(tests, sunSign.randomDate(hours[hour]))
		}
	}

	return outputTests(shuffle(tests))
}
